import * as vscode from 'vscode';
import * as path from 'path';
import { VulnerabilityNode } from '../treeDataProviders/issuesDataProvider';
import { IDependencyPage } from 'jfrog-ide-webview';
import { SeverityUtils } from '../types/severity';
import { PageType } from 'jfrog-ide-webview';

export class vulnerabilityDetails {
    public async activate(context: vscode.ExtensionContext) {
        let panel: vscode.WebviewPanel | undefined;
        context.subscriptions.push(
            vscode.commands.registerCommand('view.dependency.vulnerability', (vulnerabilityNode: VulnerabilityNode) => {
                if (!panel) {
                    panel = createWebview(context);
                }
                if (vulnerabilityNode) {
                    panel.webview.postMessage({
                        data: {
                            id: vulnerabilityNode.cve || vulnerabilityNode.xrayId,
                            name: vulnerabilityNode.component,
                            type: "npm",
                            version: vulnerabilityNode.component,
                            severity: SeverityUtils.toWebviewSeverity(vulnerabilityNode.severity),
                            edited: vulnerabilityNode.edited,
                            summary: vulnerabilityNode.summary,
                            fixedVersion: vulnerabilityNode.fixedVersions,
                            license: { name: 'license-name' },
                            references: vulnerabilityNode.references,
                            researchInfo: vulnerabilityNode.researchInfo,
                            impactedPath: {
                                name: 'Black',
                                children: [
                                    {
                                        name: 'Aquamarine',
                                        children: []
                                    },
                                    {
                                        name: 'Cyan',
                                        children: []
                                    },
                                    {
                                        name: 'Navy',
                                        children: []
                                    },
                                    {
                                        name: 'Turquoise',
                                        children: []
                                    },
                                    {
                                        name: 'Green',
                                        children: [{
                                            name: 'Purple',
                                            children: [{
                                                name: 'Indigo',
                                                children: []
                                            }, {
                                                name: 'Violet',
                                                children: []
                                            }]
                                        }]
                                    },
                                    {
                                        name: 'Red',
                                        children: [{
                                            name: 'Crimson',
                                            children: []
                                        }, {
                                            name: 'Maroon',
                                            children: []
                                        }, {
                                            name: 'Scarlet',
                                            children: []
                                        }]
                                    },
                                    {
                                        name: 'White',
                                        children: []
                                    },
                                    {
                                        name: 'Yellow',
                                        children: []
                                    }
                                ]
                            },
                        } as IDependencyPage,
                        pageType: PageType.Dependency
                    });
                }
                panel.onDidDispose(
                    () => {
                        panel = undefined;
                    },
                    undefined,
                    context.subscriptions
                );
            })
        );
    }
}

function createWebview(context: vscode.ExtensionContext) {
    // Create and show panel
    let panel: vscode.WebviewPanel = vscode.window.createWebviewPanel(
        'vulnerability.details',
        'Vulnerability Details',
        { viewColumn: vscode.ViewColumn.Beside, preserveFocus: false },
        {
            // Enable scripts in the webview
            enableScripts: true,
            enableFindWidget: true,
            enableCommandUris: true
        }
    );
    panel.iconPath = vscode.Uri.file(context.asAbsolutePath(path.join('resources', 'extensionIcon.png')));
    // And set its HTML content
    panel.webview.html = getHtmlForWebview(context, panel.webview);
    return panel;
}

function getHtmlForWebview(context: vscode.ExtensionContext, webview: vscode.Webview) {
    const scriptPathOnDisk: vscode.Uri = vscode.Uri.file(context.asAbsolutePath(path.join('dist', 'index.js')));
    const scriptUri: vscode.Uri = scriptPathOnDisk.with({ scheme: 'vscode-resource' });
    const nonce: string = getNonce();
    return `<!DOCTYPE html>
        <html lang="en">
        <head>
           + <meta charset="utf-8">
            <meta name="viewport" content="width=device-width,initial-scale=1,shrink-to-fit=no">
            <meta name="theme-color" content="#000000">
            <base href="${vscode.Uri.file(context.asAbsolutePath('dist')).with({ scheme: 'vscode-resource' })}/">
        </head>

        <body style="padding:0;">
            <noscript>You need to enable JavaScript to run this app.</noscript>
            <div id="root"></div>

            <script nonce="${nonce}" src="${scriptUri}"></script>
        </body>
        </html>`;
}

function getNonce(): string {
    let text: string = '';
    const possible: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    for (let i: number = 0; i < 32; i++) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
}
