import * as vscode from 'vscode';
import * as path from 'path';

export class vulnerabilityDetails {
    public async activate(context: vscode.ExtensionContext) {
        vscode.commands.registerCommand('vulnerability.details', () => {
            // Create and show panel
            const panel: vscode.WebviewPanel = vscode.window.createWebviewPanel(
                'vulnerability.details',
                'Vulnerability Details',
                { viewColumn: vscode.ViewColumn.Beside, preserveFocus: false },
                {
                    // Enable scripts in the webview
                    enableScripts: true,
                    enableFindWidget: true,
                    enableCommandUris: true
                }
            );
            panel.iconPath = vscode.Uri.file(context.asAbsolutePath(path.join('resources', 'extensionIcon.png')));
            // And set its HTML content
            panel.webview.html = getHtmlForWebview(context);
        });
    }
}

function getHtmlForWebview(context: vscode.ExtensionContext) {
    const scriptPathOnDisk: vscode.Uri = vscode.Uri.file(context.asAbsolutePath(path.join('dist', 'index.js')));
    const scriptUri: vscode.Uri = scriptPathOnDisk.with({ scheme: 'vscode-resource' });
    const nonce: string = getNonce();
    return `<!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width,initial-scale=1,shrink-to-fit=no">
            <meta name="theme-color" content="#000000">
            <meta http-equiv="Content-Security-Policy" content="default-src 'none'; img-src vscode-resource: https:; script-src 'nonce-${nonce}';style-src vscode-resource: 'unsafe-inline' http: https: data:;">
            <base href="${vscode.Uri.file(context.asAbsolutePath('dist')).with({ scheme: 'vscode-resource' })}/">
        </head>

        <body>
            <noscript>You need to enable JavaScript to run this app.</noscript>
            <div id="root"></div>

            <script nonce="${nonce}" src="${scriptUri}"></script>
        </body>
        </html>`;
}

function getNonce(): string {
    let text: string = '';
    const possible: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    for (let i: number = 0; i < 32; i++) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
}
